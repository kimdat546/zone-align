// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  timezone  String   @default("UTC")
  workHours Json?    // { start: "09:00", end: "17:00", days: [1,2,3,4,5] }
  
  // Preferences
  maxEarlyMeetings Int @default(2) // per week
  maxLateMeetings  Int @default(2) // per week
  
  // Authentication
  clerkId   String?  @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  teamMembers      TeamMember[]
  ownedTeams       Team[]
  meetingParticipants MeetingParticipant[]
  calendarIntegrations CalendarIntegration[]
  fairnessRecords     FairnessRecord[]
  
  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  inviteCode  String   @unique @default(cuid())
  
  // Settings
  timezone    String   @default("UTC") // Team's primary timezone
  workHours   Json?    // Default team work hours
  
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  members     TeamMember[]
  meetings    Meeting[]
  
  @@map("teams")
}

model TeamMember {
  id       String @id @default(cuid())
  role     TeamRole @default(MEMBER)
  
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  teamId   String
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  joinedAt DateTime @default(now())
  
  @@unique([userId, teamId])
  @@map("team_members")
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  description String?
  
  startTime   DateTime
  endTime     DateTime
  timezone    String   @default("UTC")
  
  // Meeting type and settings
  recurring   Boolean  @default(false)
  recurringPattern Json? // { type: "weekly", interval: 1, daysOfWeek: [1,3,5] }
  
  // External integration
  googleEventId String?
  meetingUrl    String? // Zoom, Meet, etc.
  
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  participants MeetingParticipant[]
  
  @@map("meetings")
}

model MeetingParticipant {
  id         String @id @default(cuid())
  
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  meetingId  String
  meeting    Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  
  status     ParticipantStatus @default(PENDING)
  
  // Fairness tracking
  inconvenienceScore Float @default(0) // 0-1 scale, higher = more inconvenient
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, meetingId])
  @@map("meeting_participants")
}

model CalendarIntegration {
  id            String @id @default(cuid())
  provider      CalendarProvider
  
  // OAuth tokens
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime?
  
  // Provider-specific data
  providerUserId   String // Google user ID, Microsoft user ID, etc.
  calendarId       String? // Primary calendar ID
  
  userId        String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  isActive      Boolean @default(true)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, provider])
  @@map("calendar_integrations")
}

model FairnessRecord {
  id        String   @id @default(cuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  weekStart DateTime // Start of the week
  
  // Weekly tracking
  earlyMeetings Int @default(0) // Meetings before user's work hours
  lateMeetings  Int @default(0) // Meetings after user's work hours
  totalMeetings Int @default(0)
  
  // Calculated scores
  inconvenienceScore Float @default(0) // Weekly inconvenience score
  burnoutRisk        Float @default(0) // 0-1 scale
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, weekStart])
  @@map("fairness_records")
}

// Enums
enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum ParticipantStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}

enum CalendarProvider {
  GOOGLE
  MICROSOFT
  OUTLOOK
}